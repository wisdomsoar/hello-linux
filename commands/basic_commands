

ref: GNU/Linux most wanted

Handling files and directories
Changing directories:
cd ~bill (home directory of user bill)
Copy files to a directory:
cp file1 file2 dir

Copy directories recursively:
cp -r source_dir/ dest_dir/
rsync -a source_dir/ dest_dir/
rsync -av --exclude='path/to/exclude' source_dir/ dest_dir

a: archive mode; equals -rlptgoD
r: --recursive
l: --links                 copy symlinks as symlinks
p: --perms                 set the destination permissions to be the same  as  the  source  permissions
t: --times                 transfer modification times along with the files and update them on the remote system
g: --group                 set the group of the destination file to be the same as the source file
o: --omit-dir-times
D: --devices --specials


讓某檔案的others屬性跟owner User一樣
chmod -R o=u filename

chown -R username:groupname *

Create a symbolic link:
ln -s linked_file link
ln -sf linked_file link
s: make symbolic links instead of hard links
f: remove existing destination files

get the link-to file path (ie. get XXXXXX from 'OOOOOO -> XXXXXX' link)
readlink -f path/to/file

root@imx6dlsabresd_qsip2:/sys/class/net/eth0# ls -l device
lrwxrwxrwx    1 root     root             0 Jul  2 06:40 device -> ../../../2188000.ethernet
root@imx6dlsabresd_qsip2:/sys/class/net/eth0#

root@imx6dlsabresd_qsip2:/sys/class/net/eth0# readlink -f device
/sys/devices/soc0/soc/2100000.aips-bus/2188000.ethernet

root@imx6dlsabresd_qsip2:/sys/class/net/eth0# basename $(readlink -f device)
2188000.ethernet


Rename a file, link or directory:
mv source_file dest_file
mv -T /path/src /path/dst
-T: treate DESTINATION (/path/dst) as a normal file

Remove non-empty directories:
rm -rf dir

Remove non-empty directories Recursively:
rm -rf `find . -name .git`

Listing files
ls
l: long listing
a: list all files (including hidden files)
t: by time (most recent files first)
s: by size (biggest files first)
r: reverse sort order

List link file recursively:
ls -alR | grep "/home/chhuang/500G" -B10
R: recursive

grep
B NUM: --before-context=NUM
o: only matching 只取出找到的pattern片段
例
dmesg | grep -o 'scsi.*Direct-Access.*ADATA'

--color
highlight matched

OR in grep
grep "pattern1\|pattern2" file.txt

ref: How do I grep for multiple patterns with pattern having a pipe character?
grep -- 'foo\|bar' *.txt
grep -E -- 'foo|bar' *.txt
grep -e foo -e bar -- *.txt

How to grep for contents after pattern?
https://stackoverflow.com/questions/10358547/how-to-grep-for-contents-after-pattern
取冒號之後的文字：

grep 'potato:' file.txt | sed 's/^.*: //'
or

grep 'potato:' file.txt | cut -d\   -f2
or

grep 'potato:' file.txt | awk '{print $2}'

ref: https://stackoverflow.com/questions/15148796/get-string-after-character
$ str="GenFiltEff=7.092200e-01"
$ value=${str#*=}
結果會是7.092200e-01

awk
以空白做分隔，並列印指定的第幾欄 (從1開始)
例：以空白做分隔，印出第2欄
dmesg | grep -o 'scsi.*Direct-Access.*ADATA' | awk '{print $2}'

example: Long list with most recent files last:
ls -ltr

Displaying file contents
Display the first 10 lines of a file:
head -10 file

Display the last lines of a file:
tail -10 file

********************************************************************************

Looking for files
Find *log* files in current (.) directory recursively
find . -name "*log*"

Find all the .pdf files in current (.) directory recursively and run a command on each
find . -name "*.pdf" -exec xpdf {} ';'

對每個找到的檔案執行xxx.sh
find . -type f | xargs -n | xxx.sh

在當前目錄遞迴找某關鍵字，並忽略find和grep警告訊息
find . -type f 2>/dev/null | xargs  grep -H  keyword_to_find 2>/dev/null > find_result.txt

在當前目錄找某關鍵字
grep -Ire keryword_to_find
I: Process a binary file as if it did not contain matching data 
   (--binary-files=without-match)
l: Use line buffering on output
R: Recursively. Follow all symbolic links.
大 R 跟小 r 不一樣，請看man grep...
-r recursive
-e PATTERN
-n line-number
--include=GLOB Search only files whose base name matches GLOB

-H 顯示檔名
-n 顯示行數
-a 視二進制為文字檔
-v Invert the sense of matching

grep -rnws --include="*.bp" "word_to_find"

Skip directory 
--exclude-dir=node_modules

尋找linked files (並看完整路徑)
find . -type l -ls | grep mnt

(只有看連去那些連結...)
find . -type l -lname '/*'

How to exclude a directory in find . command
ref: https://stackoverflow.com/questions/4210042/how-to-exclude-a-directory-in-find-command
find . -path ./misc -prune -o -name '*.txt' -print

o: or
這裡的解釋：
當第一個條件成立的話(ie. 修剪掉misc資料夾)，就不會執行第二個條件(ie. -name '*.txt')

取代
Replace tab to return break
translate or delete characters
cat  matrix.txt  | tr '\t' '\n'

locate "*pub*"

copy: https://stackoverflow.com/questions/5410757/delete-lines-in-a-text-file-that-contain-a-specific-string
Remove the line and print the output to standard out:
sed '/pattern to match/d' ./infile

Remove lines with specified pattern directly from the file:
sed -i '/pattern to match/d' ./infile

Remove empty line
ref: https://serverfault.com/questions/252921/how-to-remove-empty-blank-lines-from-a-file-in-unix-including-spaces
sed -i '/^$/d' file.txt
-i: edit files In place

Archiving
Create a compressed archive (TApe ARchive):
tar jcvf archive.tar.bz2 dir

tar xvf archive.tar.[gz|bz2|lzma|xz]
tar jxvf archive.tar.bz2

tar jxvf archive.bz2

c: create 
t: test
x: extract
j: on the fly bzip2 (un)compression
f: file

tar xvf archive.tar -C /path/to/directory

Ubuntu 解壓縮程式 7z & rar
ref: http://snoopymemory.blogspot.com/2016/04/ubuntu-7zrar.html
7-ZIP
 安裝
  # apt-get install p7zip-full
 指令
  # 7z x PACKAGE.7z


RAR
 安裝
  # apt-get install p7zip-rar
 指令
  # 7z x PACKAGE.rar

 安裝
  # apt-get install rar
 指令: 解壓縮
  # rar e PACKAGE.rar
 指令: 壓縮
  把現在目錄下檔案都壓縮到TargetFileName.rar中
  # rar a TargetFileName.rar

安裝好後, Ubuntu的 Desktop 檔案管理就可以直接用右鍵"在此解壓縮"解開了.

********************************************************************************

File and partition sizes
Show the total size on disk of files or
directories (Disk Usage):
du -sh dir1 dir2 file1 file2
-s: summarize
-h: human

To check more than one directory and see the total, 
use 
du -sch
-c, --total
         produce a grand total

Number of bytes, words and lines in file:
wc file (Word Count)

ls | wc -l
l: count lines.

Show the size, total space and free space of the current partition:
df -h .

Display these info for all partitions:
df -h


Kill all processes for a given user
killall -u unix_uer_name

killall power_off_wait.sh
kill -9 $(ps -w | grep power_off_wait.sh | grep -v grep | awk '{print $1}')

Write MAC address
ifconfig eth0 hw ether AA:BB:CC:DD:EE:FF

netstat -tulpn
t: tcp
u: udp
l: listen
p: programs
n: numeric

sudo mount -t ext4 /dev/sdb1 /mnt/p

picocom -b BAUD_RATE /dev/SERIAL_DEVICE

To quit picocom, you need to press Ctrl-a, then Ctrl-q.

History
從history 中找關鍵字
[Ctrl] + r ,  keyword


Count the time taken by a commdn
time find_charming_prince -cute -rich
在time之前TIMEFORMAT=%R
讓time只回傳real的 (sec)

********************************************************************************

mount samba in Linux (/etc/fstab)

sudo vi /etc/fstab

//172.16.70.151/your_name /path/to/your/local/directory/ cifs rw,username=your_name,password=your_password,uid=your_uid,gid=your_gid,iocharset=utf8,file_mode=0777,dir_mode=0777,noperm 0 0


Make zip file
zip -0r bootanimation.zip desc.txt part0 part1
0: not use any compression
r: recursively

current processes report
ps
A: Select All processes
e: Select all processes
F: Full format
w: Wide output (what is it?)

diff --ruN original_src modified_src > 0026-patch-name.patch
r: recursively compare any subdirectories found
u: output NUM (default 3) lines of unified context
   -U NUM
N: treat absent files as empty


screen
-X: Send the specified command to a running screen session.
-S: session name

start to use screen
$ screen
And press [space] key to skip the spash
list screen(s) you used
$ screen -ls
There are screens on:
19668.pts-14.Aspire-M7720-build-machine (11/21/2017 05:35:28 PM) (Detached)
2345.pts-19.Aspire-M7720-build-machine (11/17/2017 10:44:58 AM) (Detached)
delete a specified screen
format: screen -X -S [session id] quit
example:
$ screen -X -S 2345 quit
re-attach a screen
$ screen -r
or
format: screen -r [session id]
$ screen -r 19668

force attach to a specified session
screen -d -r 19668

for loop
END=5
for i in $(seq 1 $END);
do
    echo $i;
done

make sequence numbers:
for i in {1..4}; do printf "hello '%s'\n" input.mp4 >> list.txt; done

$ for i in {01..05}; do echo "$i"; done
01
02
03
04
05

$ foo=$(printf "%02d" 5)
$ echo "${foo}"
05


打patch:
testuser@localhost ~/p7zip_9.20.1 $ patch -p1 -i ../CVE-2015-1038.patch

-p1 的參數，代表要跳過一層目錄結構，
(因為patch檔內，通常有a, b 資料夾，我們用-p1去跳過這層資料夾)
-i patchfile or --input=patchfile

andy@t5r120a:/mnt/code/sa8155p/newES6/8155_LA_ES6_r00007.4_hlos_rm_repo/LINUX/android/vendor/qcom/proprietary/camx/ais$ 
patch  -p1 < 0002-Fix-sa8155-camera-loopback-test_ais.patch

-pnum or --strip=num
          Strip the smallest prefix containing num leading slashes from each file name found in the patch file.  A sequence of one or more adjacent slashes is counted as a single slash.  This controls how file names  found  in
          the patch file are treated, in case you keep your files in a different directory than the person who sent out the patch.  For example, supposing the file name in the patch file was

          /u/howard/src/blurfl/blurfl.c

       setting -p0 gives the entire file name unmodified, -p1 gives

          u/howard/src/blurfl/blurfl.c

       without the leading slash, -p4 gives

          blurfl/blurfl.c

       and not specifying -p at all just gives you blurfl.c.  Whatever you end up with is looked for either in the current directory, or the directory specified by the -d option.

ref: https://jyhshin.pixnet.net/blog/post/42727873-diff-and-patch-%E7%94%A8%E6%B3%95
--dry-run: 不會真的上補丁，而只是給你看會修改哪些檔案測試是否會成功。

Bash limiting precision of floating point variables
ref: https://unix.stackexchange.com/questions/175744/bash-limiting-precision-of-floating-point-variables
There is a special variable called scale.You can set this variable to limit the precision.
EXAMPLE

echo "300/7" | bc -l

Output:
42.85714285714285714285

To limit the precision,

echo "scale=2; 300/7" | bc -l

Output:
42.85

UPDATED

取小數部分 (for what...?)
echo "scale=3; 300/7" | bc -l | sed 's/[0-9]*\././g'

Output:
.857

echo "scale=3; 300/7" | bc -l | sed 's/[0-9]*\././g'

若輸出<1，在前面補0：
printf "%.4f" $(echo "scale=4; 1/3" | bc)
printf "\n"

dd
/data/local/bin/dd 'if=/data/local/tmp/rnd_64M.img' 'of=/mnt/user/rnd_64M.img' 'bs=1024k' 'count=64' 'iflag=fullblock'

/data/local/bin/dd 'if=/mnt/sdc2_mmc/rnd_64M.img' 'of=/mnt/user/rnd.img_64M' 'bs=1024k' 'count=64' 'iflag=direct'

https://community.mellanox.com/s/article/how-to-set-cpu-scaling-governor-to-max-performance--scaling-governor-x

Performance CPU
echo performance > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
echo performance > /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor
echo performance > /sys/devices/system/cpu/cpu2/cpufreq/scaling_governor
echo performance > /sys/devices/system/cpu/cpu3/cpufreq/scaling_governor
echo performance > /sys/devices/system/cpu/cpu4/cpufreq/scaling_governor
echo performance > /sys/devices/system/cpu/cpu5/cpufreq/scaling_governor
echo performance > /sys/devices/system/cpu/cpu6/cpufreq/scaling_governor
echo performance > /sys/devices/system/cpu/cpu7/cpufreq/scaling_governor

# cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq

3300000

# cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq

1200000

# cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq

3210156
