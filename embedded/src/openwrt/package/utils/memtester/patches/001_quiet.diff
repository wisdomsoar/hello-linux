--- a/memtester.c
+++ b/memtester.c
@@ -150,7 +150,7 @@
         printf("using testmask 0x%lx\n", testmask);
     }
 
-    while ((opt = getopt(argc, argv, "p:d:")) != -1) {
+    while ((opt = getopt(argc, argv, "qp:d:")) != -1) {
         switch (opt) {
             case 'p':
                 errno = 0;
@@ -192,7 +192,10 @@
                         device_specified = 1;
                     }
                 }
-                break;              
+                break;
+            case 'q':
+                quiet = 1;
+                break;
             default: /* '?' */
                 usage(argv[0]); /* doesn't return */
         }
--- a/tests.c
+++ b/tests.c
@@ -22,6 +22,7 @@
 #include "sizes.h"
 #include "memtester.h"
 
+int quiet = 0;
 char progress[] = "-\\|/";
 #define PROGRESSLEN 4
 #define PROGRESSOFTEN 2500
@@ -72,19 +73,19 @@
     size_t i;
     off_t physaddr;
 
-    printf("           ");
+    if (!quiet) printf("           ");
     fflush(stdout);
     for (j = 0; j < 16; j++) {
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
+		if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
         p1 = (ulv *) bufa;
-        printf("setting %3u", j);
+        if (!quiet) printf("setting %3u", j);
         fflush(stdout);
         for (i = 0; i < count; i++) {
             *p1 = ((j + i) % 2) == 0 ? (ul) p1 : ~((ul) p1);
             *p1++;
         }
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
-        printf("testing %3u", j);
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("testing %3u", j);
         fflush(stdout);
         p1 = (ulv *) bufa;
         for (i = 0; i < count; i++, p1++) {
@@ -107,7 +108,7 @@
             }
         }
     }
-    printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
     fflush(stdout);
     return 0;
 }
@@ -118,17 +119,17 @@
     ul j = 0;
     size_t i;
 
-    putchar(' ');
+    if (!quiet) putchar(' ');
     fflush(stdout);
     for (i = 0; i < count; i++) {
         *p1++ = *p2++ = rand_ul();
         if (!(i % PROGRESSOFTEN)) {
-            putchar('\b');
-            putchar(progress[++j % PROGRESSLEN]);
+            if (!quiet) putchar('\b');
+            if (!quiet) putchar(progress[++j % PROGRESSLEN]);
             fflush(stdout);
         }
     }
-    printf("\b \b");
+    if (!quiet) printf("\b \b");
     fflush(stdout);
     return compare_regions(bufa, bufb, count);
 }
@@ -233,26 +234,26 @@
     ul q;
     size_t i;
 
-    printf("           ");
+    if (!quiet) printf("           ");
     fflush(stdout);
     for (j = 0; j < 64; j++) {
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
         q = (j % 2) == 0 ? UL_ONEBITS : 0;
-        printf("setting %3u", j);
+        if (!quiet) printf("setting %3u", j);
         fflush(stdout);
         p1 = (ulv *) bufa;
         p2 = (ulv *) bufb;
         for (i = 0; i < count; i++) {
             *p1++ = *p2++ = (i % 2) == 0 ? q : ~q;
         }
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
-        printf("testing %3u", j);
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("testing %3u", j);
         fflush(stdout);
         if (compare_regions(bufa, bufb, count)) {
             return -1;
         }
     }
-    printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
     fflush(stdout);
     return 0;
 }
@@ -264,26 +265,26 @@
     ul q;
     size_t i;
 
-    printf("           ");
+    if (!quiet) printf("           ");
     fflush(stdout);
     for (j = 0; j < 64; j++) {
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
         q = (j % 2) == 0 ? CHECKERBOARD1 : CHECKERBOARD2;
-        printf("setting %3u", j);
+        if (!quiet) printf("setting %3u", j);
         fflush(stdout);
         p1 = (ulv *) bufa;
         p2 = (ulv *) bufb;
         for (i = 0; i < count; i++) {
             *p1++ = *p2++ = (i % 2) == 0 ? q : ~q;
         }
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
-        printf("testing %3u", j);
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("testing %3u", j);
         fflush(stdout);
         if (compare_regions(bufa, bufb, count)) {
             return -1;
         }
     }
-    printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
     fflush(stdout);
     return 0;
 }
@@ -294,25 +295,25 @@
     unsigned int j;
     size_t i;
 
-    printf("           ");
+    if (!quiet) printf("           ");
     fflush(stdout);
     for (j = 0; j < 256; j++) {
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
         p1 = (ulv *) bufa;
         p2 = (ulv *) bufb;
-        printf("setting %3u", j);
+        if (!quiet) printf("setting %3u", j);
         fflush(stdout);
         for (i = 0; i < count; i++) {
             *p1++ = *p2++ = (ul) UL_BYTE(j);
         }
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
-        printf("testing %3u", j);
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("testing %3u", j);
         fflush(stdout);
         if (compare_regions(bufa, bufb, count)) {
             return -1;
         }
     }
-    printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
     fflush(stdout);
     return 0;
 }
@@ -323,13 +324,13 @@
     unsigned int j;
     size_t i;
 
-    printf("           ");
+    if (!quiet) printf("           ");
     fflush(stdout);
     for (j = 0; j < UL_LEN * 2; j++) {
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
         p1 = (ulv *) bufa;
         p2 = (ulv *) bufb;
-        printf("setting %3u", j);
+        if (!quiet) printf("setting %3u", j);
         fflush(stdout);
         for (i = 0; i < count; i++) {
             if (j < UL_LEN) { /* Walk it up. */
@@ -338,14 +339,14 @@
                 *p1++ = *p2++ = ONE << (UL_LEN * 2 - j - 1);
             }
         }
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
-        printf("testing %3u", j);
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("testing %3u", j);
         fflush(stdout);
         if (compare_regions(bufa, bufb, count)) {
             return -1;
         }
     }
-    printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
     fflush(stdout);
     return 0;
 }
@@ -356,13 +357,13 @@
     unsigned int j;
     size_t i;
 
-    printf("           ");
+    if (!quiet) printf("           ");
     fflush(stdout);
     for (j = 0; j < UL_LEN * 2; j++) {
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
         p1 = (ulv *) bufa;
         p2 = (ulv *) bufb;
-        printf("setting %3u", j);
+        if (!quiet) printf("setting %3u", j);
         fflush(stdout);
         for (i = 0; i < count; i++) {
             if (j < UL_LEN) { /* Walk it up. */
@@ -371,14 +372,14 @@
                 *p1++ = *p2++ = UL_ONEBITS ^ (ONE << (UL_LEN * 2 - j - 1));
             }
         }
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
-        printf("testing %3u", j);
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("testing %3u", j);
         fflush(stdout);
         if (compare_regions(bufa, bufb, count)) {
             return -1;
         }
     }
-    printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
     fflush(stdout);
     return 0;
 }
@@ -389,13 +390,13 @@
     unsigned int j;
     size_t i;
 
-    printf("           ");
+    if (!quiet) printf("           ");
     fflush(stdout);
     for (j = 0; j < UL_LEN * 2; j++) {
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
         p1 = (ulv *) bufa;
         p2 = (ulv *) bufb;
-        printf("setting %3u", j);
+        if (!quiet) printf("setting %3u", j);
         fflush(stdout);
         for (i = 0; i < count; i++) {
             if (j < UL_LEN) { /* Walk it up. */
@@ -410,14 +411,14 @@
                                     | (ONE << (UL_LEN * 2 + 1 - j)));
             }
         }
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
-        printf("testing %3u", j);
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("testing %3u", j);
         fflush(stdout);
         if (compare_regions(bufa, bufb, count)) {
             return -1;
         }
     }
-    printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
     fflush(stdout);
     return 0;
 }
@@ -429,29 +430,29 @@
     ul q;
     size_t i;
 
-    printf("           ");
+    if (!quiet) printf("           ");
     fflush(stdout);
     for (k = 0; k < UL_LEN; k++) {
         q = ONE << k;
         for (j = 0; j < 8; j++) {
-            printf("\b\b\b\b\b\b\b\b\b\b\b");
+            if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
             q = ~q;
-            printf("setting %3u", k * 8 + j);
+            if (!quiet) printf("setting %3u", k * 8 + j);
             fflush(stdout);
             p1 = (ulv *) bufa;
             p2 = (ulv *) bufb;
             for (i = 0; i < count; i++) {
                 *p1++ = *p2++ = (i % 2) == 0 ? q : ~q;
             }
-            printf("\b\b\b\b\b\b\b\b\b\b\b");
-            printf("testing %3u", k * 8 + j);
+            if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
+            if (!quiet) printf("testing %3u", k * 8 + j);
             fflush(stdout);
             if (compare_regions(bufa, bufb, count)) {
                 return -1;
             }
         }
     }
-    printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
     fflush(stdout);
     return 0;
 }
@@ -464,7 +465,7 @@
     unsigned int b, j = 0;
     size_t i;
 
-    putchar(' ');
+    if (!quiet) putchar(' ');
     fflush(stdout);
     for (attempt = 0; attempt < 2;  attempt++) {
         if (attempt & 1) {
@@ -481,8 +482,8 @@
                 *p1++ = *t++;
             }
             if (!(i % PROGRESSOFTEN)) {
-                putchar('\b');
-                putchar(progress[++j % PROGRESSLEN]);
+                if (!quiet) putchar('\b');
+                if (!quiet) putchar(progress[++j % PROGRESSLEN]);
                 fflush(stdout);
             }
         }
@@ -490,7 +491,7 @@
             return -1;
         }
     }
-    printf("\b \b");
+    if (!quiet) printf("\b \b");
     fflush(stdout);
     return 0;
 }
@@ -502,7 +503,7 @@
     unsigned int b, j = 0;
     size_t i;
 
-    putchar( ' ' );
+    if (!quiet) putchar( ' ' );
     fflush( stdout );
     for (attempt = 0; attempt < 2; attempt++) {
         if (attempt & 1) {
@@ -519,8 +520,8 @@
                 *p1++ = *t++;
             }
             if (!(i % PROGRESSOFTEN)) {
-                putchar('\b');
-                putchar(progress[++j % PROGRESSLEN]);
+                if (!quiet) putchar('\b');
+                if (!quiet) putchar(progress[++j % PROGRESSLEN]);
                 fflush(stdout);
             }
         }
@@ -528,7 +529,7 @@
             return -1;
         }
     }
-    printf("\b \b");
+    if (!quiet) printf("\b \b");
     fflush(stdout);
     return 0;
 }

@@ -22,6 +22,7 @@
 #include "sizes.h"
 #include "memtester.h"
 
+int quiet = 0;
 char progress[] = "-\\|/";
 #define PROGRESSLEN 4
 #define PROGRESSOFTEN 2500
@@ -75,16 +76,16 @@
     printf("           ");
     fflush(stdout);
     for (j = 0; j < 16; j++) {
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
+		if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
         p1 = (ulv *) bufa;
-        printf("setting %3u", j);
+        if (!quiet) printf("setting %3u", j);
         fflush(stdout);
         for (i = 0; i < count; i++) {
             *p1 = ((j + i) % 2) == 0 ? (ul) p1 : ~((ul) p1);
             *p1++;
         }
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
-        printf("testing %3u", j);
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("testing %3u", j);
         fflush(stdout);
         p1 = (ulv *) bufa;
         for (i = 0; i < count; i++, p1++) {
@@ -107,7 +108,7 @@
             }
         }
     }
-    printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
     fflush(stdout);
     return 0;
 }
@@ -128,7 +129,7 @@
             fflush(stdout);
         }
     }
-    printf("\b \b");
+    if (!quiet) printf("\b \b");
     fflush(stdout);
     return compare_regions(bufa, bufb, count);
 }
@@ -236,23 +237,23 @@
     printf("           ");
     fflush(stdout);
     for (j = 0; j < 64; j++) {
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
         q = (j % 2) == 0 ? UL_ONEBITS : 0;
-        printf("setting %3u", j);
+        if (!quiet) printf("setting %3u", j);
         fflush(stdout);
         p1 = (ulv *) bufa;
         p2 = (ulv *) bufb;
         for (i = 0; i < count; i++) {
             *p1++ = *p2++ = (i % 2) == 0 ? q : ~q;
         }
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
-        printf("testing %3u", j);
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("testing %3u", j);
         fflush(stdout);
         if (compare_regions(bufa, bufb, count)) {
             return -1;
         }
     }
-    printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
     fflush(stdout);
     return 0;
 }
@@ -267,23 +268,23 @@
     printf("           ");
     fflush(stdout);
     for (j = 0; j < 64; j++) {
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
         q = (j % 2) == 0 ? CHECKERBOARD1 : CHECKERBOARD2;
-        printf("setting %3u", j);
+        if (!quiet) printf("setting %3u", j);
         fflush(stdout);
         p1 = (ulv *) bufa;
         p2 = (ulv *) bufb;
         for (i = 0; i < count; i++) {
             *p1++ = *p2++ = (i % 2) == 0 ? q : ~q;
         }
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
-        printf("testing %3u", j);
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("testing %3u", j);
         fflush(stdout);
         if (compare_regions(bufa, bufb, count)) {
             return -1;
         }
     }
-    printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
     fflush(stdout);
     return 0;
 }
@@ -297,22 +298,22 @@
     printf("           ");
     fflush(stdout);
     for (j = 0; j < 256; j++) {
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
         p1 = (ulv *) bufa;
         p2 = (ulv *) bufb;
-        printf("setting %3u", j);
+        if (!quiet) printf("setting %3u", j);
         fflush(stdout);
         for (i = 0; i < count; i++) {
             *p1++ = *p2++ = (ul) UL_BYTE(j);
         }
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
-        printf("testing %3u", j);
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("testing %3u", j);
         fflush(stdout);
         if (compare_regions(bufa, bufb, count)) {
             return -1;
         }
     }
-    printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
     fflush(stdout);
     return 0;
 }
@@ -326,10 +327,10 @@
     printf("           ");
     fflush(stdout);
     for (j = 0; j < UL_LEN * 2; j++) {
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
         p1 = (ulv *) bufa;
         p2 = (ulv *) bufb;
-        printf("setting %3u", j);
+        if (!quiet) printf("setting %3u", j);
         fflush(stdout);
         for (i = 0; i < count; i++) {
             if (j < UL_LEN) { /* Walk it up. */
@@ -338,14 +339,14 @@
                 *p1++ = *p2++ = ONE << (UL_LEN * 2 - j - 1);
             }
         }
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
-        printf("testing %3u", j);
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("testing %3u", j);
         fflush(stdout);
         if (compare_regions(bufa, bufb, count)) {
             return -1;
         }
     }
-    printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
     fflush(stdout);
     return 0;
 }
@@ -359,10 +360,10 @@
     printf("           ");
     fflush(stdout);
     for (j = 0; j < UL_LEN * 2; j++) {
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
         p1 = (ulv *) bufa;
         p2 = (ulv *) bufb;
-        printf("setting %3u", j);
+        if (!quiet) printf("setting %3u", j);
         fflush(stdout);
         for (i = 0; i < count; i++) {
             if (j < UL_LEN) { /* Walk it up. */
@@ -371,14 +372,14 @@
                 *p1++ = *p2++ = UL_ONEBITS ^ (ONE << (UL_LEN * 2 - j - 1));
             }
         }
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
-        printf("testing %3u", j);
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("testing %3u", j);
         fflush(stdout);
         if (compare_regions(bufa, bufb, count)) {
             return -1;
         }
     }
-    printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
     fflush(stdout);
     return 0;
 }
@@ -392,10 +393,10 @@
     printf("           ");
     fflush(stdout);
     for (j = 0; j < UL_LEN * 2; j++) {
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
         p1 = (ulv *) bufa;
         p2 = (ulv *) bufb;
-        printf("setting %3u", j);
+        if (!quiet) printf("setting %3u", j);
         fflush(stdout);
         for (i = 0; i < count; i++) {
             if (j < UL_LEN) { /* Walk it up. */
@@ -410,14 +411,14 @@
                                     | (ONE << (UL_LEN * 2 + 1 - j)));
             }
         }
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
-        printf("testing %3u", j);
+        if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
+        if (!quiet) printf("testing %3u", j);
         fflush(stdout);
         if (compare_regions(bufa, bufb, count)) {
             return -1;
         }
     }
-    printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
     fflush(stdout);
     return 0;
 }
@@ -434,24 +435,24 @@
     for (k = 0; k < UL_LEN; k++) {
         q = ONE << k;
         for (j = 0; j < 8; j++) {
-            printf("\b\b\b\b\b\b\b\b\b\b\b");
+            if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
             q = ~q;
-            printf("setting %3u", k * 8 + j);
+            if (!quiet) printf("setting %3u", k * 8 + j);
             fflush(stdout);
             p1 = (ulv *) bufa;
             p2 = (ulv *) bufb;
             for (i = 0; i < count; i++) {
                 *p1++ = *p2++ = (i % 2) == 0 ? q : ~q;
             }
-            printf("\b\b\b\b\b\b\b\b\b\b\b");
-            printf("testing %3u", k * 8 + j);
+            if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b");
+            if (!quiet) printf("testing %3u", k * 8 + j);
             fflush(stdout);
             if (compare_regions(bufa, bufb, count)) {
                 return -1;
             }
         }
     }
-    printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    if (!quiet) printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
     fflush(stdout);
     return 0;
 }
@@ -490,7 +491,7 @@
             return -1;
         }
     }
-    printf("\b \b");
+    if (!quiet) printf("\b \b");
     fflush(stdout);
     return 0;
 }
@@ -528,7 +529,7 @@
             return -1;
         }
     }
-    printf("\b \b");
+    if (!quiet) printf("\b \b");
     fflush(stdout);
     return 0;
 }
--- a/tests.h
+++ b/tests.h
@@ -14,6 +14,8 @@
  *
  */
 
+extern int quiet;
+
 /* Function declaration. */
 
 int test_stuck_address(unsigned long volatile *bufa, size_t count);
