
BitBake 实用指南
http://sunyongfeng.com/201610/programmer/yocto/Bitbake_practical_guide


https://www.kancloud.cn/digest/yocto/138624

default password:
root
oelinux123

ref: Building Custom Embedded Images with the Yocto Project


https://wiki.yoctoproject.org/wiki/How_do_I

An image is a collection of 'baked' recipes (packages)
A 'recipe' is a set of instructions for building 'packages'

recipe
(1) 會定義哪裡取得source code，以及是否要打patch(s)
(2) 解與其他recipe(s)相依的問題
(3) compile config/option, install option

recipe是一群指令用來建造(bake; bitbake)出package
一群packages建完後，即是映像檔(image)

Chapter8 Recipes: Syntax of recipes
ref: http://www.embeddedlinux.org.cn/OEManual/recipes_syntax.html

https://www.yoctoproject.org/docs/latest/bitbake-user-manual/bitbake-user-manual.html
ref: 1.5.1. Usage and syntax

O functions
The following is an example function from the sed recipe:

do_install () {
    autotools_do_install
    install -d ${D}${base_bindir}
    mv ${D}${bindir}/sed ${D}${base_bindir}/sed.${PN}
}

O variables
The follow example shows the some of the ways variables can be used in recipes:

S = "${WORKDIR}/postfix-${PV}"
PR = "r4"
CFLAGS += "-DNO_ASM"
SRC_URI_append = "file://fixup.patch;patch=1"

O keywords
inherit: including common functions
include
require: loading parts of a recipe from other files
export: exporting variables to the environment

The following example shows the use of some of these keywords:

export POSTCONF = "${STAGING_BINDIR}/postconf"
inherit autoconf
require otherfile.inc

O # This is a comment

O Line continuation: \
  #反斜後面(該行)後面不能有任何字元
  VAR = "A really long \
       line"

O Using variables: ${...}
To access the contents of a variable you need to access it via ${}:

SRC_URI = "${SOURCEFORGE_MIRROR}/libpng/zlib-${PV}.tar.gz"

O Quote all assignments
  VAR1 = "${OTHERVAR}"
  VAR2 = "The version is ${PV}"

O Conditional assignment
前面還沒被定義時，才給值
VAR1 ?= "New value"
will set VAR1 to "New value" if its currently empty. 
However if it was already set it would be unchanged. 
In the following VAR1 is left with the value "Original value":

VAR1 = "Original value"
VAR1 ?= "New value"

O Appending: +=
this operator will add a space between the new content and the existing content of the variable.
VAR =+ "Starts"

O Appending: _append
SRC_URI_append = " file://fix-makefile.patch;patch=1"
                  ^要空格的話，自己要加

for the specified target or machine
SRC_URI_append_sh4 = " file://fix-makefile.patch;patch=1"

(不是很懂?)
Note that the appended information is a variable itself, 
and therefore it's possible to used += or =+ to assign variables to the _append information:

SRC_URI_append = " file://fix-makefile.patch;patch=1"
SRC_URI_append += "file://fix-install.patch;patch=1"

O Prepending: _prepend
The following example show the space being explicitly added to the end to ensure the 
prepended value is not merged with the existing value:

CFLAGS_prepend = "-I${S}/myincludes "
                                   ^ 要自己加空格

for the specified target or machine
CFLAGS_prepend_sh4 = " file://fix-makefile.patch;patch=1"
               

Note also the lack of a space when using += to append to a prepend value
remember that the += operator is adding space itself.

O Using Space

O Style: oe-stylize.py
contrib/oe-stylize.py myrecipe.bb > fixed-recipe.bb
vi fixed-recipe.bb
mv fixed.recipe.bb myrecipe.bb

O Using python for complex operations: ${@...}
Python code is indicated by a proceeding @ sign in the variable assignment.
CXXFLAGS := "${@'${CXXFLAGS}'.replace('-frename-registers', '')}"

O Shell syntax


*************************************************************************




A 'layer' is a logical collection of recipes representing the core, 
a board support package (BSP), or an application stack
而layer是recipe的集合

bitbake + metadata (Poky)
bitbake - a task executor and scheduler
metadata – task definitions in recipes, classes + config

bitbake -c cleanall -f <recipe_name>
-c: Specify the task to execute; CMD的c
    => -c cleanall: to tell BitBake to just execute the do_clean task
    
-f: Force the specified targets/task to run
    => bitbake -c build -f <recipe_name>
(幹嘛force，不force會少做什麼嗎?)...

-e: Show the global or per-recipe Environment complete
    with information about where variables were
    set/changed.
    => Find the directory with sources you need to patch: 
    bitbake -e <your_recipe_name> | grep ^S=
    
    bitbake -e <recipe_name> | grep ^PACKAGES=
    
    xxxx listed in PACKAGES multiple times, this leads to packaging errors
    ref: https://www.yoctoproject.org/pipermail/yocto/2016-October/032268.html
    PACKAGES = "${PN}" should work (or use bitbake -e recipename | less, search 
for ^PACKAGES= (with /) 
    
    ex.
    S="/mnt/1600/chihyang/Project/8155/lv/snapdragon-auto-gen3-lv-0-1_hlos_dev_boot.git/apps/apps_proc/
    poky/build/tmp-glibc/work/aarch64-agl-linux/pulseaudio/12.2-r0/pulseaudio-12.2"

bitbake -c listtasks -f <recipe_name>

do_patch() is one of the common tasks and it fails because of wrong patch.

configuration (.conf) – global definition of variables
build/conf/local.conf (local user-defined variables)
ex:
cd /.../imx6-4.1.15_2.0.0/build-imx-qsip2/conf
vi bblayers.conf
BBLAYERS += " ${BSPDIR}/sources/meta-your-awsome-layer "

distro/poky.conf (Yocto 'distro' config variables)
machine/beagleboard.conf (machine-specific variables)

classes (.bbclass) – encapsulation and inheritance of logic
recipes (.bb) – the logical unit of execution, software/images to build

BSP 'Layers'
Image contents can be modified by 'layers'
Layers specialize images by adding or modifying recipes
Added to the BBLAYERS variable in build/conf/bblayers.conf
ex: (again)
cd /.../imx6-4.1.15_2.0.0/build-imx-qsip2/conf
vi bblayers.conf
BBLAYERS += " ${BSPDIR}/sources/meta-your-awsome-layer "

Machine settings are specified in a layer's conf/machine/xxx.conf file(s)

Machine config
ex:
cd /.../imx6-4.1.15_2.0.0/sources/meta-fsl-arm/conf/machine
vi imx6dlsabresd_qsip2.conf

classes (.bbclass) – encapsulation and inheritance of logic

Selecting KERNEL
ex:
cd /.../imx6-4.1.15_2.0.0/sources
cd ./poky/meta/recipes-kernel

sources/meta-fsl-bsp-release/imx/meta-bsp/recipes-kernel/linux/linux-imx_4.1.15.bb

這麼多個，怎麼知道試選哪個？？？？
./meta-fsl-arm/openembedded-layer/recipes-kernel
./meta-fsl-arm/recipes-kernel
./meta-fsl-arm-extra/recipes-kernel
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
./meta-fsl-bsp-release/imx/meta-bsp/recipes-kernel
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
./meta-openembedded/meta-initramfs/recipes-kernel
./meta-openembedded/meta-networking/recipes-kernel
./meta-openembedded/meta-oe/recipes-kernel
./poky/meta/recipes-kernel
./poky/meta-skeleton/recipes-kernel
./poky/meta-yocto-bsp/recipes-kernel
./poky/scripts/lib/bsp/substrate/target/arch/arm/recipes-kernel
./poky/scripts/lib/bsp/substrate/target/arch/common/recipes-kernel
./poky/scripts/lib/bsp/substrate/target/arch/i386/recipes-kernel
./poky/scripts/lib/bsp/substrate/target/arch/mips/recipes-kernel
./poky/scripts/lib/bsp/substrate/target/arch/mips64/recipes-kernel
./poky/scripts/lib/bsp/substrate/target/arch/powerpc/recipes-kernel
./poky/scripts/lib/bsp/substrate/target/arch/qemu/recipes-kernel
./poky/scripts/lib/bsp/substrate/target/arch/x86_64/recipes-kernel


The kernel recipes reference the git repos via SRC_URIs:
gep -Ire SRC_URI
kernel-module-imx-gpu-viv/kernel-module-imx-gpu-viv_5.0.11.p8.6.bb:SRC_URI = "${FSL_MIRROR}/${PN}-${PV}.tar.gz"
kernel-module-imx-gpu-viv/kernel-module-imx-gpu-viv_5.0.11.p8.6.bb:SRC_URI[md5sum] = "ed31740763b2aa6d56ecbe64d9cea565"
kernel-module-imx-gpu-viv/kernel-module-imx-gpu-viv_5.0.11.p8.6.bb:SRC_URI[sha256sum] = "3e748fc53ee46ffcf80b94d5f9535c58a3875aa107a3c77b550d8100df15de4f"
linux/linux-imx_4.1.15.bb:#SRC_URI = "${KERNEL_SRC};branch=${SRCBRANCH}"
linux/linux-imx_4.1.15.bb:SRC_URI = ""
linux/linux-imx_4.1.15.bb:#SRC_URI += "file://0001-ARM-imx-imx6ul-add-PHY-KSZ8081-new-silicon-revision-.patch \
linux-libc-headers/linux-libc-headers_4.1.bb:SRC_URI[md5sum] = "fe9dc0f6729f36400ea81aa41d614c37"
linux-libc-headers/linux-libc-headers_4.1.bb:SRC_URI[sha256sum] = "caf51f085aac1e1cea4d00dbbf3093ead07b551fc07b31b2a989c05f8ea72d9f"



/mnt/1600/chihyang/Project/8155/lv/snapdragon-auto-gen3-lv-0-1_hlos_dev_boot.git/
apps/apps_proc/meta-qti-bsp/meta-qti-extra/recipes-audio/pulseaudio
vi pulseaudio_12.2.bbappend
SRC_URI += "\
file://0008-Pulseaudio-service-need-to-wait-for-sound-card-ready.patch \
file://0003-default.pa-Load-agl-audio-plugin-module.patch \
...
"
6.2.21. build/tmp/work/
This directory contains architecture-specific work sub-directories for packages built by BitBake. 
All tasks execute from the appropriate work directory. For example, the source for a particular package is unpacked, patched, 
configured and compiled all within its own work directory. Within the work directory, organization is based on the package group 
and version for which the source is being compiled as defined by the WORKDIR.

6.2.22. build/tmp/work-shared/
For efficiency, the OpenEmbedded build system creates and uses this directory to hold recipes that share a work directory with other recipes. 
In practice, this is only used for gcc and its variants (e.g. gcc-cross, libgcc, gcc-runtime, and so forth).


supports utf-8
ref: https://github.com/RobertBerger/meta-mainline/issues/8
sudo apt-get install locales
sudo dpkg-reconfigure locales

add this to ~/.bashrc:

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8

source ~/.bashrc



The kernel for a given machine is actually built from two git branches
The 'machine' branch (KBRANCH above), and the 'meta' branch

Machine branch = base kernel + patches

The 'meta' Branch

Practical Requirements for a BSP
(1) create a machine layer:
       Define a machine configuration to match hardware
       Add machine-specific recipes or extend existing recipes
(2) Custimize: 
      All BSPs must select and configure a kernel       
      Machines with graphics capabilities probably also want to select and 
      configure graphics recipes
      Custom recipes can be added for special hardware
      Most other things covered by standard recipes

layout of BSP Layer
???
imx6-4.1.15_2.0.0/sources/meta-fsl-bsp-release/imx/meta-bsp/recipes-bsp
tree -L 1
.
├── alsa-state
├── firmware-imx
├── formfactor
├── imx-kobs
├── imx-lib
├── imx-test
├── imx-uuc
├── imx-vpu
└── u-boot

Recipe
https://www.yoctoproject.org/docs/latest/ref-manual/ref-manual.htm
PV
The version of the recipe. 
The version is normally extracted from the recipe filename. 
For example, if the recipe is named expat_2.0.1.bb, 
then the default value of PV will be "2.0.1". 
PV is generally not overridden within a recipe unless it is building an unstable (i.e. development) version 
from a source code repository (e.g. Git or Subversion).

PV is the default value of the PKGV variable.

