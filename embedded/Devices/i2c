
本文抄自底下
ref: https://magicjackting.pixnet.net/blog/post/173061691
I2C bus 簡介 (Inter-Integrated Circuit Bus)

先比較看看UART：二個都是同步傳輸介面, I2C主要是用於 CPU 和週邊晶片之間.
SPI 及 I2C 二者設計的主要目的在於減少 CPU 和週邊晶片之間的接腳數.
SPI 一般需要 4 條接線 (至少三條), 而 I2C 則只要二條線, 這和早期常用的並列匯流排動輒十數條接線有著明顯的差異.
SPI 的硬體結構簡單而且傳輸速度快, 一般是 5M/10M/20Mbps 或是更快 (可以到 200Mbps), 
I2C 的傳輸速度則只有 100Kbps/400Kbps/1Mbps(/3.4Mbps/單向5Mbps).
SPI 是全雙工, I2C 則是半雙工

OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO

I2C Bus 架構及介面接腳
I2C Bus 和 SPI 一樣也是主從式架構, 不過它不同於 SPI 的點對點或點對多點結構, 它是以匯流排型式介接, 
同時匯流排上允許有多個 master (主設備) 和多個 slave (從設備)

I2C有兩條訊號線: 
資料線 (SDA, Serial Data Line) 及
時脈線 (SCL, Serial Clock Line)

OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO

Wired-AND
提醒: 因為 Wired-AND 是 I2C 一切運作的基石, 所以這一段請大家務必熟記.

在了解 I2C Bus 協定之前, 大家應該熟記一下 Wired-AND 所代表的意義. 就字面上來看:

Wired: 意思是二組 (或者是多組) 接線直接就接在一起.
AND: 意思是它具備邏輯閘 AND 的功能.
而 AND 閘的邏輯狀態是全部輸入為 High 時, 輸出為 High. 只要任何一個輸入為 Low 時, 輸出即為 Low. 
所以 I2C 晶片的輸出接腳以 Wired-AND 接在一起, 就會有如下的效果:

所有晶片都輸出 High 時, 我們可以在接線上量測到 High.
只要有一個晶片輸出 Low, 我們就會在接線上量測到 Low.
這意味著

晶片可以自由控制 Bus 輸出 Low, 卻不一定能控制 Bus 輸出 High.
必需 Bus 上的其他晶片都輸出 High 時, 我們才能完全掌控 Bus 的輸出.
(所以才是在SCL為High時，傳送資料，包含
傳資料的時機就是就是SCL為High，SDA為維持High/Low準位
[START] 就是SCL為High，SDA為falling edge
[STOP]  就是SCL為High，SDA為rising edge)

OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO

I2C 實體層
I2C Bus 協定設計得十分的精巧. 首先我們來看一下實體層的部份, 也就是電路訊號的部份:

SCL 為 Low 時, SDA 可以改變資料.
SCL 為 High 時, SDA 必需保持訊號穩定, 不可以改變, 以方便對方讀取(栓鎖)資料.
SCL 為 High 時, 如果 SDA 有變動則視為特殊狀況: Start (啟始, SDA 由 High 轉為 Low) 或 Stop (結束, SDA 由 Low 轉為 High).

OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO

Byte 傳輸及 ACK/NACK 機制
I2C Bus 協定在傳輸的內容上也有明確的規定:

除了 Start (啟始) 和 Stop (結束) 二個訊號之外, 所有的訊號傳輸固定 8 bits (1 Byte) 為一組, msb (Most Significant Bit) 先送出.
發送端在每組 (8 bits) 訊號送出後, 需讀取接收端所回應的一個 ACK bit (訊號為 Low) 或者 NACK bit (訊號為 High). 
(由接收方控制High/Low來決定NACK/ACK，就知道接收方有沒有收到前8 bits)
(注意: 發送端不一定是 master. 例如: 讀取資料時, 發送端為 slave)

OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO

傳輸格式
一般 I2C 晶片常用的傳輸格式有下列二種:

(啟始)-[控制]-[指令]-[資料]-(結束)
(啟始)-[控制0]-[指令]-(r啟始)-[控制1]-[資料]-(結束)
上述格式中, (啟始)和(結束)是上上段 "I2C 實體層" 第三點所說的 Start (啟始) 及 Stop (結束) 訊號狀態. [控制], [指令], [資料] 則都是附有 ACK bit 之 1 組或數組 8 bits 訊號.
其實三者本質相同 (除了[資料]可能是由 master 或者 slave 發送之外) 之所分成三個區段只是為了說明方便, 在實作驅動軟體時並沒有必要一定得分清楚三者之間的界限.
[控制] 及 [指令] 部份一般都是固定長度, 但 [資料] 部份的長度則多半是可變動的.
第一種型式是基本控制格式, 所有晶片都必需支援. 第二種型式則視晶片而定.
第二種型式中的(r啟始)和一般的(啟始)並無不同, 唯一的差別是它原本應該出現在傳輸開頭, 但卻出現在傳輸中, 而這個位置原本預期要出一個(結束).
第二種型式常出現在可以連續寫入/讀取可變組數資料的晶片上 (必需要晶片有支援才行, 例如: Serial EEPROM 就有支援), 第一組 [控制0]和[指令] (一般是一個讀取寫入命令) 先設定 (晶片內部) 暫存器的起始地址; 第二組 [控制1] 才是真正的寫入/讀取命令 (但是省略了 [指令] 部份), 之後緊接著 [資料] 也就是要寫入/讀取的資料.
