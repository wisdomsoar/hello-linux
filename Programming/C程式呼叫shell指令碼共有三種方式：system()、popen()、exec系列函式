C程式呼叫shell指令碼共有三種方式：system()、popen()、exec系列函式
ref:
https://www.itread01.com/content/1548360187.html

1）system(shell命令或shell指令碼路徑);

    執行過程：system()會呼叫fork()產生子程序，由子程序來呼叫/bin/sh-c string來執行引數string字串所代表的命令，
    此命令執行完後隨即返回原呼叫的程序。在呼叫system()期間SIGCHLD 訊號會被暫時擱置，SIGINT和SIGQUIT 訊號則會被忽略。

    返回值：如果system()在呼叫/bin/sh時失敗則返回127，其他失敗原因返回-1。若引數string為空指標(NULL)，則返回非零值。
    如果 system()呼叫成功則最後會返回執行shell命令後的返回值，但是此返回值也有可能為system()呼叫/bin/sh失敗所返回的127，
    因此最好能再檢查errno 來確認執行成功。


    注意：在編寫具有SUID/SGID許可權的程式時最好不要使用system()，system()會繼承環境變數，通過環境變數可能會造成系統安全的問題。


例：在~/myprogram/目錄下有shell指令碼test.sh，內容為


#!bin/bash
#test.sh
echo $HOME


在該目錄下新建一個c檔案systemtest.c，內容為：


#include
/*This program is used to test function system*/


main()
{
  system("~/myprogram/test.sh");
}


執行結果如下：


xiakeyou@ubuntu:~/myprogram$ gcc systemtest.c -o systemtest
xiakeyou@ubuntu:~/myprogram$ ./systemtest 
/home/d/e/xiakeyou
xiakeyou@ubuntu:~/myprogram$


2）popen(char *command,char *type)    


    執行過程：popen()會呼叫fork()產生子程序，然後從子程序中呼叫/bin/sh -c來執行引數command的指令。引數type可使用“r”代表讀取，“w”代表寫入。依照此type值，popen()會建立管道連到子程序的標準輸出裝置或標準輸入裝置，然後返回一個檔案指標。隨後程序便可利用此檔案指標來讀取子程序的輸出裝置或是寫入到子程序的標準輸入裝置中。此外，所有使用檔案指標(FILE*)操作的函式也都可以使用，除了fclose()以外。


    返回值：若成功則返回檔案指標，否則返回NULL，錯誤原因存於errno中。


    注意：在編寫具SUID/SGID許可權的程式時請儘量避免使用popen()，popen()會繼承環境變數，通過環境變數可能會造成系統安全的問題。
例：C程式popentest.c內容如下：


    #include
    main()
    {
        FILE * fp;
        charbuffer[80];
        fp=popen(“~/myprogram/test.sh”,”r”);
        fgets(buffer,sizeof(buffer),fp);
        printf(“%s”,buffer);
        pclose(fp);
    }


執行結果如下：


xiakeyou@ubuntu:~/myprogram$ vim popentest.c
xiakeyou@ubuntu:~/myprogram$ gcc popentest.c -o popentest
xiakeyou@ubuntu:~/myprogram$ ./popentest
/home/d/e/xiakeyou
popen函式執行命令後，返回一個指向該命令輸出的檔案控制代碼，接下來就可以用fgets等檔案操作函式去讀取輸出結果。

#include 
FILE *popen(constchar *command, constchar *type);  
int pclose(FILE *stream);  
type的引數只能是“r”或"w"
例如

[cpp] view plaincopyprint?
#include #include int main(int argc,char*argv[]){       FILE *fstream=NULL;         char buff[1024];       memset(buff,0,sizeof(buff));       if(NULL==(fstream=popen("ls -l","r")))         {            fprintf(stderr,"execute command failed: %s",strerror(errno));             return -1;         }        if(NULL!=fgets(buff, sizeof(buff), fstream))        {            printf("%s",buff);       }        else     {           pclose(fstream);           return -1;       }       pclose(fstream);       return 0;    }  


linux exec的用法


說是exec系統呼叫，實際上在Linux中，並不存在一個exec()的函式形式，exec指的是一組函式，一共有6個，分別是：
#include 


extern char **environ;
int execl(const char *path, const char *arg, ...);
int execlp(const char *file, const char *arg, ...);
int execle(const char *path, const char *arg, ..., char *const envp[]);
int execv(const char *path, char *const argv[]);
int execvp(const char *file, char *const argv[]);


int execve(const char *path, char *const argv[], char *const envp[]);

其中只有execve是真正意義上的系統呼叫，其它都是在此基礎上經過包裝的庫函式。


exec函式族的作用是根據指定的檔名找到可執行檔案，並用它來取代呼叫程序的內容，換句話說，就是在呼叫程序內部執行一個可執行檔案。這裡的可執行檔案既可以是二進位制檔案，也可以是任何Linux下可執行的指令碼檔案。


與一般情況不同，exec函式族的函式執行成功後不會返回，因為呼叫程序的實體，包括程式碼段，資料段和堆疊等都已經被新的內容取代，只留下程序ID等一些表面上的資訊仍保持原樣，頗有些神似"三十六計"中的"金蟬脫殼"。看上去還是舊的軀殼，卻已經注入了新的靈魂。只有呼叫失敗了，它們才會返回一個-1，從原程式的呼叫點接著往下執行。

現在我們應該明白了，Linux下是如何執行新程式的，每當有程序認為自己不能為系統和擁護做出任何貢獻了，他就可以發揮最後一點餘熱，呼叫任何一個exec，讓自己以新的面貌重生；或者，更普遍的情況是，如果一個程序想執行另一個程式，它就可以fork出一個新程序，然後呼叫任何一個exec，這樣看起來就好像通過執行應用程式而產生了一個新程序一樣。


事實上第二種情況被應用得如此普遍，以至於Linux專門為其作了優化，我們已經知道，fork會將呼叫程序的所有內容原封不動的拷貝到新產生的子程序中去，這些拷貝的動作很消耗時間，而如果fork完之後我們馬上就呼叫exec，這些辛辛苦苦拷貝來的東西又會被立刻抹掉，這看起來非常不划算，於是人們設計了一種"寫時拷貝（copy-on-write）"技術，使得fork結束後並不立刻複製父程序的內容，而是到了真正實用的時候才複製，這樣如果下一條語句是exec，它就不會白白作無用功了，也就提高了效率。


返回值
如果執行成功則函式不會返回，執行失敗則直接返回-1，失敗原因存於errno 中。
大家在平時的程式設計中，如果用到了exec函式族，一定記得要加錯誤判斷語句。因為與其他系統呼叫比起來，exec很容易受傷，被執行檔案的位置，許可權等很多因素都能導致該呼叫的失敗。最常見的錯誤是：
1.找不到檔案或路徑，此時errno被設定為ENOENT； 
2.陣列argv和envp忘記用NULL結束，此時errno被設定為EFAULT； 
3.沒有對要執行檔案的執行許可權，此時errno被設定為EACCES。


l表示以引數列表的形式呼叫
v表示以引數陣列的方式呼叫
e表示可傳遞環境變數
p表示PATH中搜索執行的檔案，如果給出的不是絕對路徑就會去PATH搜尋相應名字的檔案，如PATH沒有設定，則會預設在/bin,/usr/bin下搜尋。
另：呼叫時引數必須以NULL結束。原程序開啟的檔案描述符是不會在exec中關閉的，除非用fcntl設定它們的“執行時關閉標誌（close on exec）”而原程序開啟的目錄流都將在新程序中關閉。
例子：
#include 
int main(int argc, char *argv[])
{
char *envp[]={"PATH=/tmp", "USER=lei", "STATUS=testing", NULL};
char *argv_execv[]={"echo", "excuted by execv", NULL};
char *argv_execvp[]={"echo", "executed by execvp", NULL};
char *argv_execve[]={"env", NULL};
if(fork()==0) {
if(execl("/bin/echo", "echo", "executed by execl", NULL)<0)
perror("Err on execl");
}
if(fork()==0) {
if(execlp("echo", "echo", "executed by execlp", NULL)<0)
perror("Err on execlp");
}
if(fork()==0) {
if(execle("/usr/bin/env", "env", NULL, envp)<0)
perror("Err on execle");
}
if(fork()==0) {
if(execv("/bin/echo", argv_execv)<0)
perror("Err on execv");
}
if(fork()==0) {
if(execvp("echo", argv_execvp)<0)
perror("Err on execvp");
}
    if(fork()==0) {
        if(execve("/usr/bin/env", argv_execve, envp)<0)
            perror("Err on execve");
    }
}
